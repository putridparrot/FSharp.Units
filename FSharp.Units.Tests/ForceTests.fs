// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

namespace FSharp.Units.Tests

module ForceTests =

    open NUnit.Framework
    open FsCheck
    open FsCheck.NUnit
    open FsUnit
    open FSharp.Units.Force
    open Helpers


    [<Property>]
    let ``From Dynes to Newtons and back`` () =
        let property value =
            let convertTo = dyn.toNewtons (dyn.create value)
            let convertBack = N.toDynes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900.0<dyn>, 0.009)>]
    [<TestCase(1234.0<dyn>, 0.01234)>]
    [<TestCase(46.0<dyn>, 0.00046)>]
    let ``Convert known Dynes to Newtons`` (input, expectation) = 
        dyn.toNewtons input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Dynes to Poundals and back`` () =
        let property value =
            let convertTo = dyn.toPoundals (dyn.create value)
            let convertBack = pdl.toDynes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(10099.0<dyn>, 0.73046207)>]
    [<TestCase(80000.0<dyn>, 5.7864111)>]
    [<TestCase(12345.0<dyn>, 0.89291556)>]
    let ``Convert known Dynes to Poundals`` (input, expectation) = 
        dyn.toPoundals input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Dynes to Kilogram-force and back`` () =
        let property value =
            let convertTo = dyn.toKilogramforce (dyn.create value)
            let convertBack = kp.toDynes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123456.0<dyn>, 0.125890085)>]
    [<TestCase(80000.0<dyn>, 0.081577297)>]
    [<TestCase(987654321.0<dyn>, 1007.12712394)>]
    let ``Convert known Dynes to Kilogram-force`` (input, expectation) = 
        dyn.toKilogramforce input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilogram-force to Newtons and back`` () =
        let property value =
            let convertTo = kp.toNewtons (kp.create value)
            let convertBack = N.toKilogramforce convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(16.0<kp>, 156.906)>]
    [<TestCase(9.3<kp>, 91.2018)>]
    [<TestCase(5.0<kp>, 49.0332)>]
    let ``Convert known Kilogram-force to Newtons`` (input, expectation) = 
        kp.toNewtons input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilogram-force to Dynes and back`` () =
        let property value =
            let convertTo = kp.toDynes (kp.create value)
            let convertBack = dyn.toKilogramforce convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.1<kp>, 98066.5)>]
    [<TestCase(0.009<kp>, 8825.985)>]
    [<TestCase(2.0<kp>, 1961330.0)>]
    let ``Convert known Kilogram-force to Dynes`` (input, expectation) = 
        kp.toDynes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilogram-force to Poundals and back`` () =
        let property value =
            let convertTo = kp.toPoundals (kp.create value)
            let convertBack = pdl.toKilogramforce convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(2.0<kp>, 141.863)>]
    [<TestCase(8.4<kp>, 595.826)>]
    [<TestCase(0.9<kp>, 63.8385)>]
    let ``Convert known Kilogram-force to Poundals`` (input, expectation) = 
        kp.toPoundals input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Newtons to Dynes and back`` () =
        let property value =
            let convertTo = N.toDynes (N.create value)
            let convertBack = dyn.toNewtons convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.7<N>, 70000.0)>]
    [<TestCase(0.08<N>, 8000.0)>]
    [<TestCase(2.3<N>, 230000.0)>]
    let ``Convert known Newtons to Dynes`` (input, expectation) = 
        N.toDynes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Newtons to Poundals and back`` () =
        let property value =
            let convertTo = N.toPoundals (N.create value)
            let convertBack = pdl.toNewtons convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(190.0<N>, 1374.27)>]
    [<TestCase(0.7<N>, 5.06311)>]
    [<TestCase(89.0<N>, 643.738)>]
    let ``Convert known Newtons to Poundals`` (input, expectation) = 
        N.toPoundals input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Newtons to Kilogram-force and back`` () =
        let property value =
            let convertTo = N.toKilogramforce (N.create value)
            let convertBack = kp.toNewtons convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(8.7<N>, 0.887153)>]
    [<TestCase(109.0<N>, 11.1149)>]
    [<TestCase(6.9<N>, 0.703604)>]
    let ``Convert known Newtons to Kilogram-force`` (input, expectation) = 
        N.toKilogramforce input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Poundals to Newtons and back`` () =
        let property value =
            let convertTo = pdl.toNewtons (pdl.create value)
            let convertBack = N.toPoundals convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(800.0<pdl>, 110.604)>]
    [<TestCase(8.2<pdl>, 1.13369)>]
    [<TestCase(190.0<pdl>, 26.2684)>]
    let ``Convert known Poundals to Newtons`` (input, expectation) = 
        pdl.toNewtons input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Poundals to Dynes and back`` () =
        let property value =
            let convertTo = pdl.toDynes (pdl.create value)
            let convertBack = dyn.toPoundals convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.01<pdl>, 138.255)>]
    [<TestCase(2.0<pdl>, 27651.0)>]
    [<TestCase(0.9<pdl>, 12442.94589384)>]
    let ``Convert known Poundals to Dynes`` (input, expectation) = 
        pdl.toDynes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Poundals to Kilogram-force and back`` () =
        let property value =
            let convertTo = pdl.toKilogramforce (pdl.create value)
            let convertBack = kp.toPoundals convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(34.0<pdl>, 0.479335)>]
    [<TestCase(101.1<pdl>, 1.4253161)>]
    [<TestCase(9.5<pdl>, 0.133932)>]
    let ``Convert known Poundals to Kilogram-force`` (input, expectation) = 
        pdl.toKilogramforce input
        |> should (equalWithin 0.01) expectation

