// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

namespace FSharp.Units.Tests

module DataStorageTests =

    open NUnit.Framework
    open FsCheck
    open FsCheck.NUnit
    open FsUnit
    open FSharp.Units.DataStorage
    open Helpers


    [<Property>]
    let ``From Bits to Kilobits and back`` () =
        let property value =
            let convertTo = b.toKilobits (b.create value)
            let convertBack = k.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(100.0<b>, 0.1)>]
    [<TestCase(6021.0<b>, 6.021)>]
    [<TestCase(9100.0<b>, 9.1)>]
    let ``Convert known Bits to Kilobits`` (input, expectation) = 
        b.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Megabits and back`` () =
        let property value =
            let convertTo = b.toMegabits (b.create value)
            let convertBack = Mb.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(9000000.0<b>, 9.0)>]
    [<TestCase(123456.0<b>, 0.123456)>]
    [<TestCase(1900000.0<b>, 1.9)>]
    let ``Convert known Bits to Megabits`` (input, expectation) = 
        b.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Gigabits and back`` () =
        let property value =
            let convertTo = b.toGigabits (b.create value)
            let convertBack = Gb.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(190000000.0<b>, 0.19)>]
    [<TestCase(8009.0<b>, 8.009e-6)>]
    [<TestCase(987654321.0<b>, 0.987654321)>]
    let ``Convert known Bits to Gigabits`` (input, expectation) = 
        b.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Terabits and back`` () =
        let property value =
            let convertTo = b.toTerabits (b.create value)
            let convertBack = Tb.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(987654321234.0<b>, 0.987654321234)>]
    [<TestCase(1234567890123456.0<b>, 1234.567890123455982)>]
    [<TestCase(999888777666555.0<b>, 999.888777666555029)>]
    let ``Convert known Bits to Terabits`` (input, expectation) = 
        b.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Kilobytes and back`` () =
        let property value =
            let convertTo = b.toKilobytes (b.create value)
            let convertBack = KB.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900.0<b>, 0.1125)>]
    [<TestCase(12345.0<b>, 1.543125)>]
    [<TestCase(6000.9<b>, 0.7501125)>]
    let ``Convert known Bits to Kilobytes`` (input, expectation) = 
        b.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Megabytes and back`` () =
        let property value =
            let convertTo = b.toMegabytes (b.create value)
            let convertBack = MB.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123456.0<b>, 0.015432)>]
    [<TestCase(900800.0<b>, 0.1126)>]
    [<TestCase(999888777.0<b>, 124.986097125)>]
    let ``Convert known Bits to Megabytes`` (input, expectation) = 
        b.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Gigabytes and back`` () =
        let property value =
            let convertTo = b.toGigabytes (b.create value)
            let convertBack = GB.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(999888777.0<b>, 0.124986097125)>]
    [<TestCase(1.9e+9<b>, 0.2375)>]
    [<TestCase(80090077.0<b>, 0.010011259625)>]
    let ``Convert known Bits to Gigabytes`` (input, expectation) = 
        b.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Terabytes and back`` () =
        let property value =
            let convertTo = b.toTerabytes (b.create value)
            let convertBack = TB.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(999888777666.0<b>, 0.12498609720825)>]
    [<TestCase(12345678912345.0<b>, 1.5432098640431251)>]
    [<TestCase(111999222888333.0<b>, 13.9999028610416243)>]
    let ``Convert known Bits to Terabytes`` (input, expectation) = 
        b.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Kibibits and back`` () =
        let property value =
            let convertTo = b.toKibibits (b.create value)
            let convertBack = kibibit.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1800.0<b>, 1.757813)>]
    [<TestCase(888.0<b>, 0.867188)>]
    [<TestCase(7687.0<b>, 7.506836)>]
    let ``Convert known Bits to Kibibits`` (input, expectation) = 
        b.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Bits to Mebibits and back`` () =
        let property value =
            let convertTo = b.toMebibits (b.create value)
            let convertBack = mebibit.toBits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(999888.0<b>, 0.953567505)>]
    [<TestCase(1234567.0<b>, 1.17737484)>]
    [<TestCase(900800.0<b>, 0.859069824)>]
    let ``Convert known Bits to Mebibits`` (input, expectation) = 
        b.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Bits and back`` () =
        let property value =
            let convertTo = Gb.toBits (Gb.create value)
            let convertBack = b.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0009<Gb>, 900000.0)>]
    [<TestCase(0.00007<Gb>, 70000.0)>]
    [<TestCase(1.2e-5<Gb>, 12000.0)>]
    let ``Convert known Gigabits to Bits`` (input, expectation) = 
        Gb.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Kilobits and back`` () =
        let property value =
            let convertTo = Gb.toKilobits (Gb.create value)
            let convertBack = k.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.01<Gb>, 10000.0)>]
    [<TestCase(0.91<Gb>, 910000.0)>]
    [<TestCase(6.1<Gb>, 6.1e+6)>]
    let ``Convert known Gigabits to Kilobits`` (input, expectation) = 
        Gb.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Megabits and back`` () =
        let property value =
            let convertTo = Gb.toMegabits (Gb.create value)
            let convertBack = Mb.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(6.1<Gb>, 6100.0)>]
    [<TestCase(0.961<Gb>, 961.0)>]
    [<TestCase(1.2e-3<Gb>, 1.2)>]
    let ``Convert known Gigabits to Megabits`` (input, expectation) = 
        Gb.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Terabits and back`` () =
        let property value =
            let convertTo = Gb.toTerabits (Gb.create value)
            let convertBack = Tb.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1200.0<Gb>, 1.2)>]
    [<TestCase(90012.0<Gb>, 90.012)>]
    [<TestCase(8000.0<Gb>, 8.0)>]
    let ``Convert known Gigabits to Terabits`` (input, expectation) = 
        Gb.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Kilobytes and back`` () =
        let property value =
            let convertTo = Gb.toKilobytes (Gb.create value)
            let convertBack = KB.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1.2<Gb>, 150000.0)>]
    [<TestCase(0.9<Gb>, 112500.0)>]
    [<TestCase(0.001<Gb>, 125.0)>]
    let ``Convert known Gigabits to Kilobytes`` (input, expectation) = 
        Gb.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Megabytes and back`` () =
        let property value =
            let convertTo = Gb.toMegabytes (Gb.create value)
            let convertBack = MB.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<Gb>, 112.5)>]
    [<TestCase(1.2<Gb>, 150.0)>]
    [<TestCase(80.1<Gb>, 10012.5)>]
    let ``Convert known Gigabits to Megabytes`` (input, expectation) = 
        Gb.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Gigabytes and back`` () =
        let property value =
            let convertTo = Gb.toGigabytes (Gb.create value)
            let convertBack = GB.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(99.0<Gb>, 12.375)>]
    [<TestCase(123.123<Gb>, 15.390375)>]
    [<TestCase(8000.9<Gb>, 1000.1125)>]
    let ``Convert known Gigabits to Gigabytes`` (input, expectation) = 
        Gb.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Terabytes and back`` () =
        let property value =
            let convertTo = Gb.toTerabytes (Gb.create value)
            let convertBack = TB.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(9000.0<Gb>, 1.125)>]
    [<TestCase(1234567.0<Gb>, 154.320875)>]
    [<TestCase(613.0<Gb>, 0.076625)>]
    let ``Convert known Gigabits to Terabytes`` (input, expectation) = 
        Gb.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Kibibits and back`` () =
        let property value =
            let convertTo = Gb.toKibibits (Gb.create value)
            let convertBack = kibibit.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.8<Gb>, 781250.0)>]
    [<TestCase(0.012<Gb>, 11718.75)>]
    [<TestCase(0.002<Gb>, 1953.125)>]
    let ``Convert known Gigabits to Kibibits`` (input, expectation) = 
        Gb.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabits to Mebibits and back`` () =
        let property value =
            let convertTo = Gb.toMebibits (Gb.create value)
            let convertBack = mebibit.toGigabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.002<Gb>, 1.9073486)>]
    [<TestCase(0.9<Gb>, 858.30688476562)>]
    [<TestCase(6.1<Gb>, 5817.413330078125)>]
    let ``Convert known Gigabits to Mebibits`` (input, expectation) = 
        Gb.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Bits and back`` () =
        let property value =
            let convertTo = GB.toBits (GB.create value)
            let convertBack = b.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.004<GB>, 32000000.0)>]
    [<TestCase(0.012<GB>, 96000000.0)>]
    [<TestCase(3e-9<GB>, 24.0)>]
    let ``Convert known Gigabytes to Bits`` (input, expectation) = 
        GB.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Kilobits and back`` () =
        let property value =
            let convertTo = GB.toKilobits (GB.create value)
            let convertBack = k.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<GB>, 72000.0)>]
    [<TestCase(1.2e-4<GB>, 960.0)>]
    [<TestCase(0.0078<GB>, 62400.0)>]
    let ``Convert known Gigabytes to Kilobits`` (input, expectation) = 
        GB.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Megabits and back`` () =
        let property value =
            let convertTo = GB.toMegabits (GB.create value)
            let convertBack = Mb.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0078<GB>, 62.4)>]
    [<TestCase(0.01<GB>, 80.0)>]
    [<TestCase(0.001234<GB>, 9.872)>]
    let ``Convert known Gigabytes to Megabits`` (input, expectation) = 
        GB.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Gigabits and back`` () =
        let property value =
            let convertTo = GB.toGigabits (GB.create value)
            let convertBack = Gb.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(5.0<GB>, 40.0)>]
    [<TestCase(1.2<GB>, 9.6)>]
    [<TestCase(0.01<GB>, 0.08)>]
    let ``Convert known Gigabytes to Gigabits`` (input, expectation) = 
        GB.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Terabits and back`` () =
        let property value =
            let convertTo = GB.toTerabits (GB.create value)
            let convertBack = Tb.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(70.0<GB>, 0.56)>]
    [<TestCase(9001.0<GB>, 72.008)>]
    [<TestCase(768123.9<GB>, 6144.9912)>]
    let ``Convert known Gigabytes to Terabits`` (input, expectation) = 
        GB.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Kilobytes and back`` () =
        let property value =
            let convertTo = GB.toKilobytes (GB.create value)
            let convertBack = KB.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.2<GB>, 200000.0)>]
    [<TestCase(0.009<GB>, 9000.0)>]
    [<TestCase(0.00123<GB>, 1230.0)>]
    let ``Convert known Gigabytes to Kilobytes`` (input, expectation) = 
        GB.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Megabytes and back`` () =
        let property value =
            let convertTo = GB.toMegabytes (GB.create value)
            let convertBack = MB.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<GB>, 900.0)>]
    [<TestCase(12.0<GB>, 12000.0)>]
    [<TestCase(35.6<GB>, 35600.0)>]
    let ``Convert known Gigabytes to Megabytes`` (input, expectation) = 
        GB.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Terabytes and back`` () =
        let property value =
            let convertTo = GB.toTerabytes (GB.create value)
            let convertBack = TB.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(35.6<GB>, 0.0356)>]
    [<TestCase(100.23<GB>, 0.10023)>]
    [<TestCase(900100.0<GB>, 900.1)>]
    let ``Convert known Gigabytes to Terabytes`` (input, expectation) = 
        GB.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Kibibits and back`` () =
        let property value =
            let convertTo = GB.toKibibits (GB.create value)
            let convertBack = kibibit.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.05<GB>, 390625.0)>]
    [<TestCase(0.008<GB>, 62500.0)>]
    [<TestCase(0.00123<GB>, 9609.375)>]
    let ``Convert known Gigabytes to Kibibits`` (input, expectation) = 
        GB.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Gigabytes to Mebibits and back`` () =
        let property value =
            let convertTo = GB.toMebibits (GB.create value)
            let convertBack = mebibit.toGigabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<GB>, 68.66451)>]
    [<TestCase(1.2<GB>, 9155.268)>]
    [<TestCase(19.2<GB>, 146484.288)>]
    let ``Convert known Gigabytes to Mebibits`` (input, expectation) = 
        GB.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Bits and back`` () =
        let property value =
            let convertTo = kibibit.toBits (kibibit.create value)
            let convertBack = b.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(2.0<kibibit>, 2048.0)>]
    [<TestCase(9.0<kibibit>, 9216.0)>]
    [<TestCase(17.8<kibibit>, 18227.2)>]
    let ``Convert known Kibibits to Bits`` (input, expectation) = 
        kibibit.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Kilobits and back`` () =
        let property value =
            let convertTo = kibibit.toKilobits (kibibit.create value)
            let convertBack = k.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(6.2<kibibit>, 6.3488)>]
    [<TestCase(0.9<kibibit>, 0.9216)>]
    [<TestCase(87.0<kibibit>, 89.088)>]
    let ``Convert known Kibibits to Kilobits`` (input, expectation) = 
        kibibit.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Megabits and back`` () =
        let property value =
            let convertTo = kibibit.toMegabits (kibibit.create value)
            let convertBack = Mb.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(87.0<kibibit>, 0.089088)>]
    [<TestCase(12.34<kibibit>, 0.01263616)>]
    [<TestCase(123456.0<kibibit>, 126.418879)>]
    let ``Convert known Kibibits to Megabits`` (input, expectation) = 
        kibibit.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Gigabits and back`` () =
        let property value =
            let convertTo = kibibit.toGigabits (kibibit.create value)
            let convertBack = Gb.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123456.0<kibibit>, 0.126418944)>]
    [<TestCase(8000000.0<kibibit>, 8.192)>]
    [<TestCase(1276876.0<kibibit>, 1.307521024)>]
    let ``Convert known Kibibits to Gigabits`` (input, expectation) = 
        kibibit.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Terabits and back`` () =
        let property value =
            let convertTo = kibibit.toTerabits (kibibit.create value)
            let convertBack = Tb.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(800000000.0<kibibit>, 0.8192)>]
    [<TestCase(1.5e12<kibibit>, 1536.0)>]
    [<TestCase(9999999.0<kibibit>, 0.01023999898)>]
    let ``Convert known Kibibits to Terabits`` (input, expectation) = 
        kibibit.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Kilobytes and back`` () =
        let property value =
            let convertTo = kibibit.toKilobytes (kibibit.create value)
            let convertBack = KB.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(919.0<kibibit>, 117.632)>]
    [<TestCase(77.4<kibibit>, 9.9072)>]
    [<TestCase(109.109<kibibit>, 13.965952)>]
    let ``Convert known Kibibits to Kilobytes`` (input, expectation) = 
        kibibit.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Megabytes and back`` () =
        let property value =
            let convertTo = kibibit.toMegabytes (kibibit.create value)
            let convertBack = MB.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1000.0<kibibit>, 0.128)>]
    [<TestCase(800.123<kibibit>, 0.102415744)>]
    [<TestCase(123456.0<kibibit>, 15.802368)>]
    let ``Convert known Kibibits to Megabytes`` (input, expectation) = 
        kibibit.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Gigabytes and back`` () =
        let property value =
            let convertTo = kibibit.toGigabytes (kibibit.create value)
            let convertBack = GB.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(12345678.0<kibibit>, 1.580347926)>]
    [<TestCase(8e12<kibibit>, 1024000.00)>]
    [<TestCase(1.2e5<kibibit>, 0.01536)>]
    let ``Convert known Kibibits to Gigabytes`` (input, expectation) = 
        kibibit.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Terabytes and back`` () =
        let property value =
            let convertTo = kibibit.toTerabytes (kibibit.create value)
            let convertBack = TB.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(120000000.0<kibibit>, 0.01536)>]
    [<TestCase(88e12<kibibit>, 11264.0)>]
    [<TestCase(9000000.0<kibibit>, 0.001152)>]
    let ``Convert known Kibibits to Terabytes`` (input, expectation) = 
        kibibit.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kibibits to Mebibits and back`` () =
        let property value =
            let convertTo = kibibit.toMebibits (kibibit.create value)
            let convertBack = mebibit.toKibibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(600.0<kibibit>, 0.5859375)>]
    [<TestCase(12345.0<kibibit>, 12.055664)>]
    [<TestCase(101.0<kibibit>, 0.0986328)>]
    let ``Convert known Kibibits to Mebibits`` (input, expectation) = 
        kibibit.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Bits and back`` () =
        let property value =
            let convertTo = k.toBits (k.create value)
            let convertBack = b.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(9.0<k>, 9000.0)>]
    [<TestCase(6.7<k>, 6700.0)>]
    [<TestCase(1.2345<k>, 1234.5)>]
    let ``Convert known Kilobits to Bits`` (input, expectation) = 
        k.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Megabits and back`` () =
        let property value =
            let convertTo = k.toMegabits (k.create value)
            let convertBack = Mb.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900.0<k>, 0.9)>]
    [<TestCase(12345.0<k>, 12.345)>]
    [<TestCase(9988.0<k>, 9.988)>]
    let ``Convert known Kilobits to Megabits`` (input, expectation) = 
        k.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Gigabits and back`` () =
        let property value =
            let convertTo = k.toGigabits (k.create value)
            let convertBack = Gb.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123456.0<k>, 0.123456)>]
    [<TestCase(8000700.0<k>, 8.0007)>]
    [<TestCase(191987578.0<k>, 191.987578)>]
    let ``Convert known Kilobits to Gigabits`` (input, expectation) = 
        k.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Terabits and back`` () =
        let property value =
            let convertTo = k.toTerabits (k.create value)
            let convertBack = Tb.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(191987578.0<k>, 0.191987578)>]
    [<TestCase(9010081903.0<k>, 9.010081903)>]
    [<TestCase(123456789.0<k>, 0.123456789)>]
    let ``Convert known Kilobits to Terabits`` (input, expectation) = 
        k.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Kilobytes and back`` () =
        let property value =
            let convertTo = k.toKilobytes (k.create value)
            let convertBack = KB.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(80.0<k>, 10.0)>]
    [<TestCase(15.67<k>, 1.95875)>]
    [<TestCase(8007.09<k>, 1000.88625)>]
    let ``Convert known Kilobits to Kilobytes`` (input, expectation) = 
        k.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Megabytes and back`` () =
        let property value =
            let convertTo = k.toMegabytes (k.create value)
            let convertBack = MB.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123456.0<k>, 15.432)>]
    [<TestCase(998877.0<k>, 124.859625)>]
    [<TestCase(10090.0<k>, 1.26125)>]
    let ``Convert known Kilobits to Megabytes`` (input, expectation) = 
        k.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Gigabytes and back`` () =
        let property value =
            let convertTo = k.toGigabytes (k.create value)
            let convertBack = GB.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1828972.0<k>, 0.2286215)>]
    [<TestCase(879860.8<k>, 0.1099826)>]
    [<TestCase(78178971.0<k>, 9.772371375)>]
    let ``Convert known Kilobits to Gigabytes`` (input, expectation) = 
        k.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Terabytes and back`` () =
        let property value =
            let convertTo = k.toTerabytes (k.create value)
            let convertBack = TB.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1234567891.0<k>, 0.154320986375)>]
    [<TestCase(999999098.0<k>, 0.12499988725)>]
    [<TestCase(84618364142.0<k>, 10.57729551775)>]
    let ``Convert known Kilobits to Terabytes`` (input, expectation) = 
        k.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Kibibits and back`` () =
        let property value =
            let convertTo = k.toKibibits (k.create value)
            let convertBack = kibibit.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(89.1<k>, 87.01172)>]
    [<TestCase(7.1<k>, 6.93359)>]
    [<TestCase(438.0<k>, 427.734)>]
    let ``Convert known Kilobits to Kibibits`` (input, expectation) = 
        k.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobits to Mebibits and back`` () =
        let property value =
            let convertTo = k.toMebibits (k.create value)
            let convertBack = mebibit.toKilobits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(77790.0<k>, 74.186325)>]
    [<TestCase(123456.0<k>, 117.736816)>]
    [<TestCase(23972.0<k>, 22.861481)>]
    let ``Convert known Kilobits to Mebibits`` (input, expectation) = 
        k.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Bits and back`` () =
        let property value =
            let convertTo = KB.toBits (KB.create value)
            let convertBack = b.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123.456<KB>, 987648.0)>]
    [<TestCase(900.0<KB>, 7.2e+6)>]
    [<TestCase(100200.0<KB>, 801600000.0)>]
    let ``Convert known Kilobytes to Bits`` (input, expectation) = 
        KB.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Kilobits and back`` () =
        let property value =
            let convertTo = KB.toKilobits (KB.create value)
            let convertBack = k.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(4.0<KB>, 32.0)>]
    [<TestCase(1.2<KB>, 9.6)>]
    [<TestCase(88.1<KB>, 704.8)>]
    let ``Convert known Kilobytes to Kilobits`` (input, expectation) = 
        KB.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Megabits and back`` () =
        let property value =
            let convertTo = KB.toMegabits (KB.create value)
            let convertBack = Mb.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(88.1<KB>, 0.7048)>]
    [<TestCase(7.1<KB>, 0.0568)>]
    [<TestCase(12.8<KB>, 0.1024)>]
    let ``Convert known Kilobytes to Megabits`` (input, expectation) = 
        KB.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Gigabits and back`` () =
        let property value =
            let convertTo = KB.toGigabits (KB.create value)
            let convertBack = Gb.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(10080.0<KB>, 0.08064)>]
    [<TestCase(4.5e+9<KB>, 36000.0)>]
    [<TestCase(271279.0<KB>, 2.170232)>]
    let ``Convert known Kilobytes to Gigabits`` (input, expectation) = 
        KB.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Terabits and back`` () =
        let property value =
            let convertTo = KB.toTerabits (KB.create value)
            let convertBack = Tb.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(9009000.0<KB>, 0.072072)>]
    [<TestCase(7.2e9<KB>, 57.6)>]
    [<TestCase(100100100900.0<KB>, 800.8008072)>]
    let ``Convert known Kilobytes to Terabits`` (input, expectation) = 
        KB.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Megabytes and back`` () =
        let property value =
            let convertTo = KB.toMegabytes (KB.create value)
            let convertBack = MB.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1009.0<KB>, 1.009)>]
    [<TestCase(8899.0<KB>, 8.899)>]
    [<TestCase(619.0<KB>, 0.619)>]
    let ``Convert known Kilobytes to Megabytes`` (input, expectation) = 
        KB.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Gigabytes and back`` () =
        let property value =
            let convertTo = KB.toGigabytes (KB.create value)
            let convertBack = GB.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900800.0<KB>, 0.9008)>]
    [<TestCase(1234567.0<KB>, 1.234567)>]
    [<TestCase(7.9e9<KB>, 7900.0)>]
    let ``Convert known Kilobytes to Gigabytes`` (input, expectation) = 
        KB.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Terabytes and back`` () =
        let property value =
            let convertTo = KB.toTerabytes (KB.create value)
            let convertBack = TB.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<KB>, 9e-10)>]
    [<TestCase(140000000.0<KB>, 0.14)>]
    [<TestCase(7.0<KB>, 7e-9)>]
    let ``Convert known Kilobytes to Terabytes`` (input, expectation) = 
        KB.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Kibibits and back`` () =
        let property value =
            let convertTo = KB.toKibibits (KB.create value)
            let convertBack = kibibit.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<KB>, 0.0703125)>]
    [<TestCase(6e+3<KB>, 46875.0)>]
    [<TestCase(1.23<KB>, 9.609375)>]
    let ``Convert known Kilobytes to Kibibits`` (input, expectation) = 
        KB.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilobytes to Mebibits and back`` () =
        let property value =
            let convertTo = KB.toMebibits (KB.create value)
            let convertBack = mebibit.toKilobytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(70.0<KB>, 0.534058)>]
    [<TestCase(9.0<KB>, 0.0686646)>]
    [<TestCase(10022.0<KB>, 76.461792)>]
    let ``Convert known Kilobytes to Mebibits`` (input, expectation) = 
        KB.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Bits and back`` () =
        let property value =
            let convertTo = mebibit.toBits (mebibit.create value)
            let convertBack = b.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<mebibit>, 943718.4)>]
    [<TestCase(0.006<mebibit>, 6291.456)>]
    [<TestCase(2.0<mebibit>, 2097152.0)>]
    let ``Convert known Mebibits to Bits`` (input, expectation) = 
        mebibit.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Kilobits and back`` () =
        let property value =
            let convertTo = mebibit.toKilobits (mebibit.create value)
            let convertBack = k.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.8<mebibit>, 838.861)>]
    [<TestCase(2.0<mebibit>, 2097.15)>]
    [<TestCase(0.23<mebibit>, 241.1725)>]
    let ``Convert known Mebibits to Kilobits`` (input, expectation) = 
        mebibit.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Megabits and back`` () =
        let property value =
            let convertTo = mebibit.toMegabits (mebibit.create value)
            let convertBack = Mb.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<mebibit>, 0.943718)>]
    [<TestCase(12.3<mebibit>, 12.89748)>]
    [<TestCase(8.1<mebibit>, 8.49347)>]
    let ``Convert known Mebibits to Megabits`` (input, expectation) = 
        mebibit.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Gigabits and back`` () =
        let property value =
            let convertTo = mebibit.toGigabits (mebibit.create value)
            let convertBack = Gb.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(12345.0<mebibit>, 12.944671)>]
    [<TestCase(100.0<mebibit>, 0.104858)>]
    [<TestCase(999.9<mebibit>, 1.0484711)>]
    let ``Convert known Mebibits to Gigabits`` (input, expectation) = 
        mebibit.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Terabits and back`` () =
        let property value =
            let convertTo = mebibit.toTerabits (mebibit.create value)
            let convertBack = Tb.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(100009.0<mebibit>, 0.104867037)>]
    [<TestCase(9876543.0<mebibit>, 10.35630595)>]
    [<TestCase(1000900.0<mebibit>, 1.049519718)>]
    let ``Convert known Mebibits to Terabits`` (input, expectation) = 
        mebibit.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Kilobytes and back`` () =
        let property value =
            let convertTo = mebibit.toKilobytes (mebibit.create value)
            let convertBack = KB.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(4.0<mebibit>, 524.288)>]
    [<TestCase(1.45<mebibit>, 190.0544)>]
    [<TestCase(88.11<mebibit>, 11548.754)>]
    let ``Convert known Mebibits to Kilobytes`` (input, expectation) = 
        mebibit.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Megabytes and back`` () =
        let property value =
            let convertTo = mebibit.toMegabytes (mebibit.create value)
            let convertBack = MB.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(109.0<mebibit>, 14.2868)>]
    [<TestCase(55.67<mebibit>, 7.2967782)>]
    [<TestCase(45678.0<mebibit>, 5987.1068)>]
    let ``Convert known Mebibits to Megabytes`` (input, expectation) = 
        mebibit.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Gigabytes and back`` () =
        let property value =
            let convertTo = mebibit.toGigabytes (mebibit.create value)
            let convertBack = GB.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(4000.0<mebibit>, 0.524288311)>]
    [<TestCase(90100.0<mebibit>, 11.80959421)>]
    [<TestCase(1009.0<mebibit>, 0.132251727)>]
    let ``Convert known Mebibits to Gigabytes`` (input, expectation) = 
        mebibit.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Terabytes and back`` () =
        let property value =
            let convertTo = mebibit.toTerabytes (mebibit.create value)
            let convertBack = TB.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1000009.0<mebibit>, 0.1310731796)>]
    [<TestCase(90808080.0<mebibit>, 11.902396662)>]
    [<TestCase(5.2e12<mebibit>, 681574.4)>]
    let ``Convert known Mebibits to Terabytes`` (input, expectation) = 
        mebibit.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Mebibits to Kibibits and back`` () =
        let property value =
            let convertTo = mebibit.toKibibits (mebibit.create value)
            let convertBack = kibibit.toMebibits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(5.0<mebibit>, 5120.0)>]
    [<TestCase(1234.56<mebibit>, 1264189.44)>]
    [<TestCase(505.0<mebibit>, 517120.0)>]
    let ``Convert known Mebibits to Kibibits`` (input, expectation) = 
        mebibit.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Bits and back`` () =
        let property value =
            let convertTo = Mb.toBits (Mb.create value)
            let convertBack = b.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.34<Mb>, 340000.0)>]
    [<TestCase(9.12<Mb>, 9120000.0)>]
    [<TestCase(0.987<Mb>, 987000.0)>]
    let ``Convert known Megabits to Bits`` (input, expectation) = 
        Mb.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Kilobits and back`` () =
        let property value =
            let convertTo = Mb.toKilobits (Mb.create value)
            let convertBack = k.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.77<Mb>, 770.0)>]
    [<TestCase(5.0<Mb>, 5000.0)>]
    [<TestCase(0.987<Mb>, 987.0)>]
    let ``Convert known Megabits to Kilobits`` (input, expectation) = 
        Mb.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Gigabits and back`` () =
        let property value =
            let convertTo = Mb.toGigabits (Mb.create value)
            let convertBack = Gb.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900.0<Mb>, 0.9)>]
    [<TestCase(12345.0<Mb>, 12.345)>]
    [<TestCase(189.1<Mb>, 0.1891)>]
    let ``Convert known Megabits to Gigabits`` (input, expectation) = 
        Mb.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Terabits and back`` () =
        let property value =
            let convertTo = Mb.toTerabits (Mb.create value)
            let convertBack = Tb.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(100200300.0<Mb>, 100.2003)>]
    [<TestCase(99887777.0<Mb>, 99.887777)>]
    [<TestCase(80009.0<Mb>, 0.080009)>]
    let ``Convert known Megabits to Terabits`` (input, expectation) = 
        Mb.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Kilobytes and back`` () =
        let property value =
            let convertTo = Mb.toKilobytes (Mb.create value)
            let convertBack = KB.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(9.0<Mb>, 1125.0)>]
    [<TestCase(1.23<Mb>, 153.75)>]
    [<TestCase(98.1<Mb>, 12262.5)>]
    let ``Convert known Megabits to Kilobytes`` (input, expectation) = 
        Mb.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Megabytes and back`` () =
        let property value =
            let convertTo = Mb.toMegabytes (Mb.create value)
            let convertBack = MB.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(98.1<Mb>, 12.2625)>]
    [<TestCase(10.9<Mb>, 1.3625)>]
    [<TestCase(888.123<Mb>, 111.015375)>]
    let ``Convert known Megabits to Megabytes`` (input, expectation) = 
        Mb.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Gigabytes and back`` () =
        let property value =
            let convertTo = Mb.toGigabytes (Mb.create value)
            let convertBack = GB.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(900.0<Mb>, 0.1125)>]
    [<TestCase(10123.0<Mb>, 1.265375)>]
    [<TestCase(9988.0<Mb>, 1.2485)>]
    let ``Convert known Megabits to Gigabytes`` (input, expectation) = 
        Mb.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Terabytes and back`` () =
        let property value =
            let convertTo = Mb.toTerabytes (Mb.create value)
            let convertBack = TB.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(998877.0<Mb>, 0.124859625)>]
    [<TestCase(100200400.0<Mb>, 12.5250375)>]
    [<TestCase(9008877.0<Mb>, 1.126109625)>]
    let ``Convert known Megabits to Terabytes`` (input, expectation) = 
        Mb.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Kibibits and back`` () =
        let property value =
            let convertTo = Mb.toKibibits (Mb.create value)
            let convertBack = kibibit.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(12.0<Mb>, 11718.756)>]
    [<TestCase(0.9<Mb>, 878.906)>]
    [<TestCase(1.23<Mb>, 1201.172)>]
    let ``Convert known Megabits to Kibibits`` (input, expectation) = 
        Mb.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabits to Mebibits and back`` () =
        let property value =
            let convertTo = Mb.toMebibits (Mb.create value)
            let convertBack = mebibit.toMegabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(4.5<Mb>, 4.29153)>]
    [<TestCase(0.8<Mb>, 0.762939)>]
    [<TestCase(900.0<Mb>, 858.307)>]
    let ``Convert known Megabits to Mebibits`` (input, expectation) = 
        Mb.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Bits and back`` () =
        let property value =
            let convertTo = MB.toBits (MB.create value)
            let convertBack = b.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.04<MB>, 320000.0)>]
    [<TestCase(0.0091<MB>, 72800.0)>]
    [<TestCase(3e-5<MB>, 240.0)>]
    let ``Convert known Megabytes to Bits`` (input, expectation) = 
        MB.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Kilobits and back`` () =
        let property value =
            let convertTo = MB.toKilobits (MB.create value)
            let convertBack = k.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(6.0<MB>, 48000.0)>]
    [<TestCase(0.3<MB>, 2400.0)>]
    [<TestCase(0.009<MB>, 72.0)>]
    let ``Convert known Megabytes to Kilobits`` (input, expectation) = 
        MB.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Megabits and back`` () =
        let property value =
            let convertTo = MB.toMegabits (MB.create value)
            let convertBack = Mb.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(3.0<MB>, 24.0)>]
    [<TestCase(0.9<MB>, 7.2)>]
    [<TestCase(13.0<MB>, 104.0)>]
    let ``Convert known Megabytes to Megabits`` (input, expectation) = 
        MB.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Gigabits and back`` () =
        let property value =
            let convertTo = MB.toGigabits (MB.create value)
            let convertBack = Gb.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(13.0<MB>, 0.104)>]
    [<TestCase(900.0<MB>, 7.2)>]
    [<TestCase(18000.0<MB>, 144.0)>]
    let ``Convert known Megabytes to Gigabits`` (input, expectation) = 
        MB.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Terabits and back`` () =
        let property value =
            let convertTo = MB.toTerabits (MB.create value)
            let convertBack = Tb.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(18000.0<MB>, 0.144)>]
    [<TestCase(9718290.0<MB>, 77.74632)>]
    [<TestCase(9e12<MB>, 72000000.0)>]
    let ``Convert known Megabytes to Terabits`` (input, expectation) = 
        MB.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Kilobytes and back`` () =
        let property value =
            let convertTo = MB.toKilobytes (MB.create value)
            let convertBack = KB.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(6.0<MB>, 6000.0)>]
    [<TestCase(0.9<MB>, 900.0)>]
    [<TestCase(123.4<MB>, 123400.0)>]
    let ``Convert known Megabytes to Kilobytes`` (input, expectation) = 
        MB.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Gigabytes and back`` () =
        let property value =
            let convertTo = MB.toGigabytes (MB.create value)
            let convertBack = GB.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(123.4<MB>, 0.1234)>]
    [<TestCase(900.0<MB>, 0.9)>]
    [<TestCase(8e6<MB>, 8000.0)>]
    let ``Convert known Megabytes to Gigabytes`` (input, expectation) = 
        MB.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Terabytes and back`` () =
        let property value =
            let convertTo = MB.toTerabytes (MB.create value)
            let convertBack = TB.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(80000.0<MB>, 0.08)>]
    [<TestCase(12345678.0<MB>, 12.345678)>]
    [<TestCase(900800.0<MB>, 0.9008)>]
    let ``Convert known Megabytes to Terabytes`` (input, expectation) = 
        MB.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Kibibits and back`` () =
        let property value =
            let convertTo = MB.toKibibits (MB.create value)
            let convertBack = kibibit.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(6.0<MB>, 46875.0)>]
    [<TestCase(0.9<MB>, 7031.25)>]
    [<TestCase(0.03<MB>, 234.375)>]
    let ``Convert known Megabytes to Kibibits`` (input, expectation) = 
        MB.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Megabytes to Mebibits and back`` () =
        let property value =
            let convertTo = MB.toMebibits (MB.create value)
            let convertBack = mebibit.toMegabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.03<MB>, 0.2288818)>]
    [<TestCase(4.5<MB>, 34.3323)>]
    [<TestCase(80.1<MB>, 611.1145)>]
    let ``Convert known Megabytes to Mebibits`` (input, expectation) = 
        MB.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Bits and back`` () =
        let property value =
            let convertTo = Tb.toBits (Tb.create value)
            let convertBack = b.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0007<Tb>, 700000000.0)>]
    [<TestCase(1.23e-6<Tb>, 1230000.0)>]
    [<TestCase(0.00098<Tb>, 980000000.0)>]
    let ``Convert known Terabits to Bits`` (input, expectation) = 
        Tb.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Kilobits and back`` () =
        let property value =
            let convertTo = Tb.toKilobits (Tb.create value)
            let convertBack = k.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.001<Tb>, 1000000.0)>]
    [<TestCase(6.1e-6<Tb>, 6100.0)>]
    [<TestCase(0.00009<Tb>, 90000.0)>]
    let ``Convert known Terabits to Kilobits`` (input, expectation) = 
        Tb.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Megabits and back`` () =
        let property value =
            let convertTo = Tb.toMegabits (Tb.create value)
            let convertBack = Mb.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.09<Tb>, 90000.0)>]
    [<TestCase(3.5e-4<Tb>, 350.0)>]
    [<TestCase(0.0123<Tb>, 12300.0)>]
    let ``Convert known Terabits to Megabits`` (input, expectation) = 
        Tb.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Gigabits and back`` () =
        let property value =
            let convertTo = Tb.toGigabits (Tb.create value)
            let convertBack = Gb.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<Tb>, 900.0)>]
    [<TestCase(1.45<Tb>, 1450.0)>]
    [<TestCase(8.19<Tb>, 8190.0)>]
    let ``Convert known Terabits to Gigabits`` (input, expectation) = 
        Tb.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Kilobytes and back`` () =
        let property value =
            let convertTo = Tb.toKilobytes (Tb.create value)
            let convertBack = KB.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0009<Tb>, 112500.0)>]
    [<TestCase(3.14e-6<Tb>, 392.5)>]
    [<TestCase(0.001<Tb>, 125000.0)>]
    let ``Convert known Terabits to Kilobytes`` (input, expectation) = 
        Tb.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Megabytes and back`` () =
        let property value =
            let convertTo = Tb.toMegabytes (Tb.create value)
            let convertBack = MB.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.4<Tb>, 50000.0)>]
    [<TestCase(3.9e-3<Tb>, 487.5)>]
    [<TestCase(0.007<Tb>, 875.0)>]
    let ``Convert known Terabits to Megabytes`` (input, expectation) = 
        Tb.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Gigabytes and back`` () =
        let property value =
            let convertTo = Tb.toGigabytes (Tb.create value)
            let convertBack = GB.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<Tb>, 1.125)>]
    [<TestCase(0.00123<Tb>, 0.15375)>]
    [<TestCase(8.1e-3<Tb>, 1.0125)>]
    let ``Convert known Terabits to Gigabytes`` (input, expectation) = 
        Tb.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Terabytes and back`` () =
        let property value =
            let convertTo = Tb.toTerabytes (Tb.create value)
            let convertBack = TB.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.3<Tb>, 0.0375)>]
    [<TestCase(14.0<Tb>, 1.75)>]
    [<TestCase(0.8<Tb>, 0.1)>]
    let ``Convert known Terabits to Terabytes`` (input, expectation) = 
        Tb.toTerabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Kibibits and back`` () =
        let property value =
            let convertTo = Tb.toKibibits (Tb.create value)
            let convertBack = kibibit.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0009<Tb>, 878906.25)>]
    [<TestCase(6.1e-6<Tb>, 5957.031)>]
    [<TestCase(12e-9<Tb>, 11.71875)>]
    let ``Convert known Terabits to Kibibits`` (input, expectation) = 
        Tb.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabits to Mebibits and back`` () =
        let property value =
            let convertTo = Tb.toMebibits (Tb.create value)
            let convertBack = mebibit.toTerabits convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.9<Tb>, 858306.59999)>]
    [<TestCase(4.6e-3<Tb>, 4386.9)>]
    [<TestCase(0.00123<Tb>, 1173.0194092)>]
    let ``Convert known Terabits to Mebibits`` (input, expectation) = 
        Tb.toMebibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Bits and back`` () =
        let property value =
            let convertTo = TB.toBits (TB.create value)
            let convertBack = b.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.00008<TB>, 640000000.0)>]
    [<TestCase(1.2e-12<TB>, 9.6)>]
    [<TestCase(9.0<TB>, 7.2e+13)>]
    let ``Convert known Terabytes to Bits`` (input, expectation) = 
        TB.toBits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Kilobits and back`` () =
        let property value =
            let convertTo = TB.toKilobits (TB.create value)
            let convertBack = k.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<TB>, 72000000.0)>]
    [<TestCase(1.4e-6<TB>, 11200.0)>]
    [<TestCase(6.1e-5<TB>, 488000.0)>]
    let ``Convert known Terabytes to Kilobits`` (input, expectation) = 
        TB.toKilobits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Megabits and back`` () =
        let property value =
            let convertTo = TB.toMegabits (TB.create value)
            let convertBack = Mb.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.005<TB>, 40000.0)>]
    [<TestCase(0.000123<TB>, 984.0)>]
    [<TestCase(0.00006<TB>, 480.0)>]
    let ``Convert known Terabytes to Megabits`` (input, expectation) = 
        TB.toMegabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Gigabits and back`` () =
        let property value =
            let convertTo = TB.toGigabits (TB.create value)
            let convertBack = Gb.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.008<TB>, 64.0)>]
    [<TestCase(3e-7<TB>, 0.0024)>]
    [<TestCase(0.00023<TB>, 1.84)>]
    let ``Convert known Terabytes to Gigabits`` (input, expectation) = 
        TB.toGigabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Terabits and back`` () =
        let property value =
            let convertTo = TB.toTerabits (TB.create value)
            let convertBack = Tb.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(5.0<TB>, 40.0)>]
    [<TestCase(1.23<TB>, 9.84)>]
    [<TestCase(800.0<TB>, 6400.0)>]
    let ``Convert known Terabytes to Terabits`` (input, expectation) = 
        TB.toTerabits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Kilobytes and back`` () =
        let property value =
            let convertTo = TB.toKilobytes (TB.create value)
            let convertBack = KB.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0009<TB>, 900000.0)>]
    [<TestCase(3.14e-7<TB>, 314.0)>]
    [<TestCase(0.00063<TB>, 630000.0)>]
    let ``Convert known Terabytes to Kilobytes`` (input, expectation) = 
        TB.toKilobytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Megabytes and back`` () =
        let property value =
            let convertTo = TB.toMegabytes (TB.create value)
            let convertBack = MB.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.009<TB>, 9000.0)>]
    [<TestCase(0.234<TB>, 234000.0)>]
    [<TestCase(2.0<TB>, 2e+6)>]
    let ``Convert known Terabytes to Megabytes`` (input, expectation) = 
        TB.toMegabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Gigabytes and back`` () =
        let property value =
            let convertTo = TB.toGigabytes (TB.create value)
            let convertBack = GB.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(2.7<TB>, 2700.0)>]
    [<TestCase(0.9<TB>, 900.0)>]
    [<TestCase(0.0123<TB>, 12.3)>]
    let ``Convert known Terabytes to Gigabytes`` (input, expectation) = 
        TB.toGigabytes input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Kibibits and back`` () =
        let property value =
            let convertTo = TB.toKibibits (TB.create value)
            let convertBack = kibibit.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.0009<TB>, 7031250.0)>]
    [<TestCase(1.23e-5<TB>, 96093.75)>]
    [<TestCase(0.0001<TB>, 781250.0)>]
    let ``Convert known Terabytes to Kibibits`` (input, expectation) = 
        TB.toKibibits input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Terabytes to Mebibits and back`` () =
        let property value =
            let convertTo = TB.toMebibits (TB.create value)
            let convertBack = mebibit.toTerabytes convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(0.01<TB>, 76293.95)>]
    [<TestCase(0.008<TB>, 61035.156)>]
    [<TestCase(2.0<TB>, 15258789.0625)>]
    let ``Convert known Terabytes to Mebibits`` (input, expectation) = 
        TB.toMebibits input
        |> should (equalWithin 0.01) expectation

