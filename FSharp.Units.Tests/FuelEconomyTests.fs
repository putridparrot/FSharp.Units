// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

namespace FSharp.Units.Tests

module FuelEconomyTests =

    open NUnit.Framework
    open FsCheck
    open FsCheck.NUnit
    open FsUnit
    open FSharp.Units.FuelEconomy
    open Helpers


    [<Property>]
    let ``From Kilometre Per Litre to US Miles Per Gallon and back`` () =
        let property value =
            let convertTo = kml.toUSMilesPerGallon (kml.create value)
            let convertBack = usmpg.toKilometrePerLitre convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(109.0<kml>, 256.384)>]
    [<TestCase(9.4<kml>, 22.1102)>]
    [<TestCase(1.3<kml>, 3.05779)>]
    let ``Convert known Kilometre Per Litre to US Miles Per Gallon`` (input, expectation) = 
        kml.toUSMilesPerGallon input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Kilometre Per Litre to Miles Per Gallon and back`` () =
        let property value =
            let convertTo = kml.toMilesPerGallon (kml.create value)
            let convertBack = mpg.toKilometrePerLitre convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(5.0<kml>, 14.124)>]
    [<TestCase(180.0<kml>, 508.466)>]
    [<TestCase(5.4<kml>, 15.254)>]
    let ``Convert known Kilometre Per Litre to Miles Per Gallon`` (input, expectation) = 
        kml.toMilesPerGallon input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Miles Per Gallon to Kilometre Per Litre and back`` () =
        let property value =
            let convertTo = mpg.toKilometrePerLitre (mpg.create value)
            let convertBack = kml.toMilesPerGallon convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(12.0<mpg>, 4.24807)>]
    [<TestCase(8.2<mpg>, 2.90285)>]
    [<TestCase(0.5<mpg>, 0.177003)>]
    let ``Convert known Miles Per Gallon to Kilometre Per Litre`` (input, expectation) = 
        mpg.toKilometrePerLitre input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From Miles Per Gallon to US Miles Per Gallon and back`` () =
        let property value =
            let convertTo = mpg.toUSMilesPerGallon (mpg.create value)
            let convertBack = usmpg.toMilesPerGallon convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(1.4<mpg>, 1.16574)>]
    [<TestCase(709.0<mpg>, 590.36575)>]
    [<TestCase(0.9<mpg>, 0.74941)>]
    let ``Convert known Miles Per Gallon to US Miles Per Gallon`` (input, expectation) = 
        mpg.toUSMilesPerGallon input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From US Miles Per Gallon to Kilometre Per Litre and back`` () =
        let property value =
            let convertTo = usmpg.toKilometrePerLitre (usmpg.create value)
            let convertBack = kml.toUSMilesPerGallon convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(23.0<usmpg>, 9.77831)>]
    [<TestCase(7.0<usmpg>, 2.97601)>]
    [<TestCase(0.9<usmpg>, 0.382629)>]
    let ``Convert known US Miles Per Gallon to Kilometre Per Litre`` (input, expectation) = 
        usmpg.toKilometrePerLitre input
        |> should (equalWithin 0.01) expectation

    [<Property>]
    let ``From US Miles Per Gallon to Miles Per Gallon and back`` () =
        let property value =
            let convertTo = usmpg.toMilesPerGallon (usmpg.create value)
            let convertBack = mpg.toUSMilesPerGallon convertTo

            convertBack
            |> should (equalWithin 0.01) value

        Check.QuickThrowOnFailure (testRange property)

    [<TestCase(109.0<usmpg>, 130.9036)>]
    [<TestCase(78.2<usmpg>, 93.91432)>]
    [<TestCase(0.9<usmpg>, 1.08086)>]
    let ``Convert known US Miles Per Gallon to Miles Per Gallon`` (input, expectation) = 
        usmpg.toMilesPerGallon input
        |> should (equalWithin 0.01) expectation

